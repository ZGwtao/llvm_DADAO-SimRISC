From cea6d04746b598b1410a904c9bc6dd37d6e2a4fc Mon Sep 17 00:00:00 2001
From: guangtaozhu <guangtaozhu@outlook.com>
Date: Thu, 1 Jun 2023 16:15:44 +0800
Subject: [PATCH 3/4] [llvm][TargetParser] create arch-triple info for 'DADAO'

Signed-off-by: guangtaozhu <guangtaozhu@outlook.com>
---
 llvm/include/llvm/TargetParser/Triple.h | 5 +++++
 llvm/lib/TargetParser/Triple.cpp        | 8 ++++++++
 2 files changed, 13 insertions(+)

diff --git a/llvm/include/llvm/TargetParser/Triple.h b/llvm/include/llvm/TargetParser/Triple.h
index 59513fa2f206..084eebc1b09e 100644
--- a/llvm/include/llvm/TargetParser/Triple.h
+++ b/llvm/include/llvm/TargetParser/Triple.h
@@ -56,6 +56,7 @@ public:
     bpfel,          // eBPF or extended BPF or 64-bit BPF (little endian)
     bpfeb,          // eBPF or extended BPF or 64-bit BPF (big endian)
     csky,           // CSKY: csky
+    dadao,          // DADAO: dadao
     dxil,           // DXIL 32-bit DirectX bytecode
     hexagon,        // Hexagon: hexagon
     loongarch32,    // LoongArch (32-bit): loongarch32
@@ -935,6 +936,10 @@ public:
     return getArch() == Triple::csky;
   }
 
+  bool isDADAO() const {
+    return getArch() == Triple::dadao;
+  }
+
   /// Tests whether the target is the Apple "arm64e" AArch64 subarch.
   bool isArm64e() const {
     return getArch() == Triple::aarch64 &&
diff --git a/llvm/lib/TargetParser/Triple.cpp b/llvm/lib/TargetParser/Triple.cpp
index a68035989a93..77631b29d96f 100644
--- a/llvm/lib/TargetParser/Triple.cpp
+++ b/llvm/lib/TargetParser/Triple.cpp
@@ -37,6 +37,7 @@ StringRef Triple::getArchTypeName(ArchType Kind) {
   case bpfeb:          return "bpfeb";
   case bpfel:          return "bpfel";
   case csky:           return "csky";
+  case dadao:          return "dadao";
   case dxil:           return "dxil";
   case hexagon:        return "hexagon";
   case hsail64:        return "hsail64";
@@ -323,6 +324,7 @@ Triple::ArchType Triple::getArchTypeForLLVMName(StringRef Name) {
     .Case("armeb", armeb)
     .Case("avr", avr)
     .StartsWith("bpf", BPFArch)
+    .Case("dadao", dadao)
     .Case("m68k", m68k)
     .Case("mips", mips)
     .Case("mipsel", mipsel)
@@ -471,6 +473,7 @@ static Triple::ArchType parseArch(StringRef ArchName) {
     .Case("thumb", Triple::thumb)
     .Case("thumbeb", Triple::thumbeb)
     .Case("avr", Triple::avr)
+    .Case("dadao", Triple::dadao)
     .Case("m68k", Triple::m68k)
     .Case("msp430", Triple::msp430)
     .Cases("mips", "mipseb", "mipsallegrex", "mipsisa32r6",
@@ -819,6 +822,7 @@ static Triple::ObjectFormatType getDefaultFormat(const Triple &T) {
   case Triple::bpfeb:
   case Triple::bpfel:
   case Triple::csky:
+  case Triple::dadao:
   case Triple::hexagon:
   case Triple::hsail64:
   case Triple::hsail:
@@ -1444,6 +1448,7 @@ static unsigned getArchPointerBitWidth(llvm::Triple::ArchType Arch) {
   case llvm::Triple::amdil64:
   case llvm::Triple::bpfeb:
   case llvm::Triple::bpfel:
+  case llvm::Triple::dadao:
   case llvm::Triple::hsail64:
   case llvm::Triple::le64:
   case llvm::Triple::loongarch64:
@@ -1587,6 +1592,7 @@ Triple Triple::get64BitArchVariant() const {
   case Triple::amdil64:
   case Triple::bpfeb:
   case Triple::bpfel:
+  case Triple::dadao:
   case Triple::hsail64:
   case Triple::le64:
   case Triple::loongarch64:
@@ -1649,6 +1655,7 @@ Triple Triple::getBigEndianArchVariant() const {
   case Triple::amdil64:
   case Triple::amdil:
   case Triple::avr:
+  case Triple::dadao:
   case Triple::dxil:
   case Triple::hexagon:
   case Triple::hsail64:
@@ -1753,6 +1760,7 @@ bool Triple::isLittleEndian() const {
   case Triple::avr:
   case Triple::bpfel:
   case Triple::csky:
+  case Triple::dadao:
   case Triple::dxil:
   case Triple::hexagon:
   case Triple::hsail64:
-- 
2.39.2

